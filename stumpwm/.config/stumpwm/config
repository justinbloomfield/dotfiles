;; -*-lisp-*-
(in-package :stumpwm)

(set-module-dir "/home/poq/.config/stumpwm/contrib")
(load-module "maildir")
(load-module "mem")
(load-module "ttf-fonts")

(set-font (make-instance 'xft:font :family "Liberation Mono" :subfamily "Regular" :size 9))


;; functions
(ql:quickload :swank)
(defcommand swank ()  ()
            (swank:create-server :port 4005
                                 :dont-close t)
            (echo-string (current-screen)
                         "Getting swanky"))
(swank)

;(defun map-groups-keybindings ()
;  (dotimes (n (length *groups-key-bindings*))
;    (define-key *root-map*
;        (kbd (format nil "C-~A" (nth n *groups-key-bindings*)))
;      (format nil "gselect ~A" (+ 1 n)))))
;(defvar *groups-key-bindings* '(1 2 3 4 "'" "," "." "p"))

(defcommand colon1 (&optional (initial "")) (:rest)
            (let ((cmd (read-one-line (current-screen) ": " :initial-input initial)))
              (when cmd
                (eval-command cmd t))))

;; macros
(defmacro make-groups-bg (&rest names)
  (let ((ns (mapcar #'(lambda (n) (concatenate 'string "gnewbg " n)) names)))
    `(run-commands ,@ns)))

;; modeline
(setf *mode-line-border-width* 0)
(setf *mode-line-foreground-color* "DeepSkyBlue")
(setf *mode-line-background-color* "black")

(setf *group-format* " %t ")
(setf *window-format* "%m%n %20t ")
(setf *mode-line-timeout* 2)
(setf *time-modeline-string* "%e %B %l:%M ")

(defun get-date-modeline ()
  (stumpwm:run-shell-command
   (format nil "date +\"~A\""
           *time-modeline-string*) t))

(setf *screen-mode-line-format*
      (list "^B^2 %g ^n^b %W ^> %X | %N | "
            '(:eval (get-date-modeline))))
(mode-line)

;; borders
(set-focus-color "gray")
(set-unfocus-color "gray2")
(setf *maxsize-border-width* 2)
(setf *normal-border-width* 2)
(setf *window-border-style* :thin)

;; binds
(define-key *root-map* (kbd "c") "exec st")
(define-key *root-map* (kbd "C-c") "exec st")
(define-key *root-map* (kbd "C-q") "quit")
(define-key *root-map* (kbd "C-'") "gselect 1")
(define-key *root-map* (kbd "C-,") "gselect 2")
(define-key *root-map* (kbd "C-.") "gselect 3")
(define-key *root-map* (kbd "C-p") "gselect 4")
(define-key *root-map* (kbd "C-f") "fullscreen")



;; window rules
(clear-window-placement-rules)

(define-frame-preference "web"
  (1 t   t :class "qutebrowser")
  (1 nil t :class "Firefox"))

(run-commands "grename def")
(make-groups-bg "www" "irc" "dota")
;(map-groups-keybindings)
